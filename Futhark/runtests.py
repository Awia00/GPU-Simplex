#!/usr/bin/python
'''The evil test/benchmark script.'''

from glob import glob
import argparse
import itertools
import os.path
import subprocess

# ---------------------------------------------------------------------------- #
# Hardcoded stuff
# ---------------------------------------------------------------------------- #

test_dir = 'generated_tests/'
test_in = 'test_in.txt'
test_out = 'test_out.txt'
basic_test= 'tests/basic_4_3_3.test'

class FutharkFormat:
    '''Different futhark syntax test formats. (enum hack)
    '''
    prefix = ['inner_', 'outer_', 'full_']
    All = range(len(prefix))
    InnerParallel, OuterParallel, FullParallel = All # 0, 1, 2
    @staticmethod
    def get_prefix(val):
        return FutharkFormat.prefix[val]

class InstanceGenFormat:
    '''The generated output from Simplex Instance Generator is python syntax
       lists with 5 lines per simplex instance. The information contained in
       each line is described by this class (also hacky enum).
    '''
    Params, Aconstraints, Bconstants, Ccoefficients, Results = 0,1,2,3,4
    Step = 5

# ---------------------------------------------------------------------------- #
# Futhark Format Helpers
# ---------------------------------------------------------------------------- #

def write_element(val, out):
    out.write(str(val))

def write_list(arr, out, write_element):
    out.write('[')
    l = len(arr)
    if l > 0:
        for i in range(0, l-1):
            write_element(arr[i], out)
            out.write(',')
        write_element(arr[-1], out)
    out.write(']')

def write_futhark_float(val, out):
    out.write(str(val) + 'f32')

def write_futhark_array(arr, out):
    write_list(arr, out, write_futhark_float)

def write_futhark_matrix(arr, out):
    write_list(arr, out, write_futhark_array)
    out.write('\n')

# ---------------------------------------------------------------------------- #
# Transform Data Helpers
# ---------------------------------------------------------------------------- #

def pad_constraints(mats, padding):
    '''Pad list of constraints matrix (A) with zeroes to the same dimensions.'''
    def pad(mat, (col_pad, row_pad)):
        col_extra = [0] * col_pad
        row_len = len(mat[0]) + col_pad
        row_extra = [[0] * row_len] * row_pad
        return [row + col_extra for row in mat] + row_extra
    return [pad(a,b) for a,b in zip(mats, padding)]

def pad_constants(cons, padding):
    '''Pad list of constants vectors (b) with zeroes to the same length.'''
    def pad(arr, (_, pad)):
        return arr + [0] * pad
    return [pad(a,b) for a,b in zip(cons, padding)]

def pad_coefficients(coefs, padding):
    '''Pad list of coefficients vector (c) with zeroes to the same length.'''
    def pad(arr, (pad, _)):
        return arr + [0] * pad
    return [pad(a,b) for a,b in zip(coefs, padding)]

def flatten_1dim(arr):
    return list(itertools.chain.from_iterable(arr))

def flatten_2dim(arr):
    return flatten_1dim(flatten_1dim(arr))

def flatten_2dim_inner(arr):
    return [flatten_1dim(i) for i in arr]

# ---------------------------------------------------------------------------- #
# Converting Simplex Instance Gen format to Futhark format
# ---------------------------------------------------------------------------- #

class FutharkTestReader(object):
    '''Reads data generated by Simplex Instance Generator and evaluates it into
       python lists and matrices.
    '''

    def __init__(self, test_file):
        self.test_file = test_file

    def read(self, i):
        '''Read all the i'th lines and evaluate them (as python code).
           Assume that we are reading from our own Simplex Instance Gen data.
        '''
        with open(self.test_file) as f:
            lines = itertools.islice(f, i, None, InstanceGenFormat.Step)
            return [eval(i) for i in lines] #sorrynotsorry

    def read_params(self):
        return self.read(InstanceGenFormat.Params)

    def read_a_constraints(self):
        return self.read(InstanceGenFormat.Aconstraints)

    def read_b_constants(self):
        return self.read(InstanceGenFormat.Bconstants)

    def read_c_coefficients(self):
        return self.read(InstanceGenFormat.Ccoefficients)

    def read_results(self):
        return self.read(InstanceGenFormat.Results)

class FutharkTestWriter(object):
    '''Writes lists and matrices into Futhark syntax format.'''

    def __init__(self, out_file):
        try:
            os.remove(out_file)
        except OSError:
            pass
        self.out_file = out_file

    def write(self, func, param):
        with open(self.out_file, 'a') as f:
            write_list(param, f, func)
            f.write('\n')

    def write_matrices(self, mats):
        self.write(write_futhark_matrix, mats)

    def write_arrays(self, arrs):
        self.write(write_futhark_array, arrs)

    def write_floats(self, floats):
        self.write(write_futhark_float, floats)

    def write_elements(self, elts):
        self.write(write_element, elts)

class FutharkTestConverter(object):
    '''Converts test data output by Simplex Instance Generator to Futhark
    syntax.'''

    def __init__(self,test_file, output_dir, output_in_file, output_out_file,
            max_v, max_c):
        '''test_file = where we read Simplex Instance Gen data from
           max_v = max num of variables (aka n, c vector length, columns in A)
           max_c = max num of constants (aka m, b vector length, rows in A)
        '''
        self.reader = FutharkTestReader(test_file)
        self.output_dir = output_dir
        self.output_in_file = output_in_file
        self.output_out_file = output_out_file
        self.params = self.reader.read_params()
        self.padding = [(max_v - v, max_c - c) for (v,c) in self.params]

    def convert_a_constraints(self, outputs):
        a_constraints = self.reader.read_a_constraints()
        padded_a = pad_constraints(a_constraints, self.padding)
        for (mode,iw,_) in outputs:
            if mode == FutharkFormat.OuterParallel:
                iw.write_matrices(padded_a)
            elif mode == FutharkFormat.InnerParallel:
                iw.write_arrays(flatten_2dim_inner(padded_a))
            elif mode == FutharkFormat.FullParallel:
                iw.write_floats(flatten_2dim(a_constraints))

    def convert_b_constants(self, outputs):
        b_constants = self.reader.read_b_constants()
        padded_b = pad_constants(b_constants, self.padding)
        for (mode,iw,_) in outputs:
            if mode == FutharkFormat.OuterParallel:
                iw.write_arrays(padded_b)
            elif mode == FutharkFormat.InnerParallel:
                iw.write_arrays(padded_b)
            elif mode == FutharkFormat.FullParallel:
                iw.write_floats(flatten_1dim(b_constants))

    def convert_c_coefficients(self, outputs):
        c_coefficients = self.reader.read_c_coefficients()
        padded_c = pad_coefficients(c_coefficients, self.padding)
        for (mode,iw,_) in outputs:
            if mode == FutharkFormat.OuterParallel:
                iw.write_arrays(padded_c)
            elif mode == FutharkFormat.InnerParallel:
                iw.write_arrays(padded_c)
            elif mode == FutharkFormat.FullParallel:
                iw.write_floats(flatten_1dim(c_coefficients))
                (vs,cs) = zip(*self.params)
                iw.write_elements(cs)
                iw.write_elements(vs)

    def convert_results(self, outputs):
        results = self.reader.read_results()
        for (_,_,ow) in outputs:
            # right now all versions have the same output format
            ow.write_floats(results)

    def convert(self, modes):
        outputs = []
        for mode in modes:
            prefix = FutharkFormat.get_prefix(mode)
            tin = os.path.join(self.output_dir, prefix + self.output_in_file)
            tout = os.path.join(self.output_dir, prefix + self.output_out_file)
            iw, ow = FutharkTestWriter(tin), FutharkTestWriter(tout)
            outputs.append((mode, iw, ow))

        self.convert_a_constraints(outputs)
        self.convert_b_constants(outputs)
        self.convert_c_coefficients(outputs)
        self.convert_results(outputs)


# ---------------------------------------------------------------------------- #
# External commands
# ---------------------------------------------------------------------------- #

def run_futhark(files, compiler='futhark-c', mode='test'):
    '''Test/benchmark a futhark program on list of files.
       compiler param is the futhark compiler to use.
       mode is either 'test' or 'bench'.
    '''
    for f in files:
        if os.path.isfile(f):
            cmd = 'futhark-{0} --compiler={1} {2}'.format(mode, compiler, f)
            subprocess.call(cmd, shell=True)
        else:
            print("File doesn't exist: {0}".format(f))

# ---------------------------------------------------------------------------- #
# Entry Point
# ---------------------------------------------------------------------------- #

def doit(args):
    '''Main test runner. args are parsed command-line parameters.'''
    if not(args.no_convert):
        convert_file, n, max_v, max_c = args.convert
        try:
            _, max_v, max_c = int(n), int(max_v), int(max_c)
        except ValueError:
            print('2nd, 3rd, and 4th argument to --convert option must be integers.')
            # n not currently used, but might be useful for validation

        print('Converting data from {0} to Futhark test data'.format(convert_file))
        try:
            os.mkdir(test_dir)
        except OSError:
            pass
        converter = FutharkTestConverter(convert_file, test_dir, test_in, test_out, max_v, max_c)
        converter.convert(FutharkFormat.All)

    compiler = args.compiler
    if args.no_test_bench:
        pass
    elif args.test_all:
        print('Testing all files')
        run_futhark(glob('./*.fut'), compiler, mode='test')
    elif args.test:
        print('Testing one file: ' + args.test)
        run_futhark([args.test], compiler, mode='test')
    elif args.bench_all:
        print('Benchmarking all files')
        run_futhark(glob('./*.fut'), compiler, mode='bench')
    elif args.bench:
        print('Benchmarking one file: ' + args.bench)
        run_futhark([args.bench], compiler, mode='bench')
    else:
        print('Default: Testing all files')
        run_futhark(glob('./*.fut'), compiler, mode='test')

def test_file(string):
    '''Parse test file parameters from the test's name "name_n_v_c.test",
       where n is the number of instances in the test
       v is the max number of variables (n)
       c is the max number of constants (m)
    '''
    fname = string.strip('.test')
    params = fname.split('_')
    if len(params) < 4:
        raise argparse.ArgumentTypeError("arg {0} should be a file name of format 'name_n_v_c.test'".format(string))
    try:
        params = params[-3:]
        return (string, int(params[0]), int(params[1]), int(params[2]))
    except TypeError:
        raise argparse.ArgumentTypeError("In 'name_n_v_c.test', n, v, and c must be integers".format(string))


def main():
    parser = argparse.ArgumentParser(description='Test the Futhark Simplex suite. Converts test data from Simplex Instance Generation format to futhark syntax and puts the generaed tests in {0} directory. By default uses basic.test from tests directory.')
    parser.add_argument('-a','--test-all', help='Test all versions',action='store_true')
    parser.add_argument('-t','--test', help='Test one simplex version. The argument is the path to the simplex futhark file.',type=str)
    parser.add_argument('-e','--bench-all', help='Benchmark all versions',action='store_true')
    parser.add_argument('-b','--bench', help='Benchmark one simplex version. The argument is the path to the simplex futhark file.', type=str)
    parser.add_argument('-p','--compiler', help='Which Futhark compiler to use', default='futhark-c')

    parser.add_argument('-c','--convert',
        help='Convert test data from output of Simplex Instance Generator ' +
        '(SIG). Argument is the filename which should follow the format ' +
        '(path optional): "path/name_n_v_c.test". ' +
        'This file should contain the output of SIG. ' +
        '<n> is the number of instances, <v> is the max number of ' +
        'variables (n), and <c> is the max number of constants (m). ' +
        'Results are put in tests directory with _gen_ names.',
        default=('tests/basic_4_3_3.test',4,3,3),
        type=test_file)
    parser.add_argument('-x','--no-test-bench', help='Do not run any tests or benches (for use with --convert).', action='store_true')
    parser.add_argument('-n','--no-convert', help='Do not convert any tests, use ones already generated.', action='store_true')
    args = parser.parse_args()
    doit(args)

main()
