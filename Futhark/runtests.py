#!/usr/bin/python
'''The evil test/benchmark script.'''

from glob import glob
import argparse
import itertools
import os.path
import subprocess

# ---------------------------------------------------------------------------- #
# Hardcoded stuff
# ---------------------------------------------------------------------------- #

test_dir = 'tests/'
test_in = 'gen_test_in.txt'
test_out = 'gen_test_out.txt'
tmp_prefix = 'tmpfutsimplex'

class FutharkFormat:
    '''Different futhark syntax test formats. (enum hack)
    '''
    prefix = ['inner_', 'outer_', 'full_']
    All = range(len(prefix))
    InnerParallel, OuterParallel, FullParallel = All # 0, 1, 2
    @staticmethod
    def get_prefix(val):
        return FutharkFormat.prefix[val]

class InstanceGenFormat:
    '''The generated output from Simplex Instance Generator is python syntax
       lists with 5 lines per simplex instance. The information contained in
       each line is described by this class (also hacky enum).
    '''
    Params, Aconstraints, Bconstants, Ccoefficients, Results = 0,1,2,3,4
    Step = 5

# ---------------------------------------------------------------------------- #
# Futhark Format Helpers
# ---------------------------------------------------------------------------- #

def write_element(val, out):
    out.write(str(val))

def write_list(arr, out, write_element):
    out.write('[')
    l = len(arr)
    if l > 0:
        for i in range(0, l-1):
            write_element(arr[i], out)
            out.write(',')
        write_element(arr[-1], out)
    out.write(']')

def write_futhark_float(val, out):
    out.write(str(val) + 'f32')

def write_futhark_array(arr, out):
    write_list(arr, out, write_futhark_float)

def write_futhark_matrix(arr, out):
    write_list(arr, out, write_futhark_array)
    out.write('\n')

# ---------------------------------------------------------------------------- #
# Transform Data Helpers
# ---------------------------------------------------------------------------- #

def pad_constraints(mats, padding):
    '''Pad list of constraints matrix (A) with zeroes to the same dimensions.'''
    def pad(mat, (col_pad, row_pad)):
        col_extra = [0] * col_pad
        row_len = len(mat[0]) + col_pad
        row_extra = [[0] * row_len] * row_pad
        return [row + col_extra for row in mat] + row_extra
    return [pad(a,b) for a,b in zip(mats, padding)]

def pad_constants(cons, padding):
    '''Pad list of constants vectors (b) with zeroes to the same length.'''
    def pad(arr, (_, pad)):
        return arr + [0] * pad
    return [pad(a,b) for a,b in zip(cons, padding)]

def pad_coefficients(coefs, padding):
    '''Pad list of coefficients vector (c) with zeroes to the same length.'''
    def pad(arr, (pad, _)):
        return arr + [0] * pad
    return [pad(a,b) for a,b in zip(coefs, padding)]

def flatten_1dim(arr):
    return list(itertools.chain.from_iterable(arr))

def flatten_2dim(arr):
    return flatten_1dim(flatten_1dim(arr))

def flatten_2dim_inner(arr):
    return [flatten_1dim(i) for i in arr]

# ---------------------------------------------------------------------------- #
# Converting Simplex Instance Gen format to Futhark format
# ---------------------------------------------------------------------------- #

class FutharkTestReader(object):
    '''Reads data generated by Simplex Instance Generator and evaluates it into
       python lists and matrices.
    '''

    def __init__(self, test_file):
        self.test_file = test_file

    def read(self, i):
        '''Read all the i'th lines and evaluate them (as python code).
           Assume that we are reading from our own Simplex Instance Gen data.
        '''
        with open(self.test_file) as f:
            lines = itertools.islice(f, i, None, InstanceGenFormat.Step)
            return [eval(i) for i in lines] #sorrynotsorry

    def read_params(self):
        return self.read(InstanceGenFormat.Params)

    def read_a_constraints(self):
        return self.read(InstanceGenFormat.Aconstraints)

    def read_b_constants(self):
        return self.read(InstanceGenFormat.Bconstants)

    def read_c_coefficients(self):
        return self.read(InstanceGenFormat.Ccoefficients)

    def read_results(self):
        return self.read(InstanceGenFormat.Results)

class FutharkTestWriter(object):
    '''Writes lists and matrices into Futhark syntax format.'''

    def __init__(self, out_file):
        try:
            os.remove(out_file)
        except OSError:
            pass
        self.out_file = out_file

    def write(self, func, param):
        with open(self.out_file, 'a') as f:
            write_list(param, f, func)
            f.write('\n')

    def write_matrices(self, mats):
        self.write(write_futhark_matrix, mats)

    def write_arrays(self, arrs):
        self.write(write_futhark_array, arrs)

    def write_floats(self, floats):
        self.write(write_futhark_float, floats)

    def write_elements(self, elts):
        self.write(write_element, elts)

class FutharkTestConverter(object):
    '''Converts test data output by Simplex Instance Generator to Futhark
    syntax.'''

    def __init__(self,test_file, output_dir, output_in_file, output_out_file,
            max_v, max_c):
        '''test_file = where we read Simplex Instance Gen data from
           max_v = max num of variables (aka n, c vector length, columns in A)
           max_c = max num of constants (aka m, b vector length, rows in A)
        '''
        self.reader = FutharkTestReader(test_file)
        self.output_dir = output_dir
        self.output_in_file = output_in_file
        self.output_out_file = output_out_file
        self.params = self.reader.read_params()
        self.padding = [(max_v - v, max_c - c) for (v,c) in self.params]

    def convert_outer_parallel(self, iw, ow):
        iw.write_matrices(pad_constraints(self.reader.read_a_constraints(), self.padding))
        iw.write_arrays(pad_constants(self.reader.read_b_constants(), self.padding))
        iw.write_arrays(pad_coefficients(self.reader.read_c_coefficients(), self.padding))
        ow.write_floats(self.reader.read_results())

    def convert_inner_parallel(self, iw, ow):
        padded_a = pad_constraints(self.reader.read_a_constraints(), self.padding)
        iw.write_arrays(flatten_2dim_inner(padded_a))
        iw.write_arrays(pad_constants(self.reader.read_b_constants(), self.padding))
        iw.write_arrays(pad_coefficients(self.reader.read_c_coefficients(), self.padding))
        ow.write_floats(self.reader.read_results())

    def convert_full_parallel(self, iw, ow):
        iw.write_floats(flatten_2dim(self.reader.read_a_constraints()))
        iw.write_floats(flatten_1dim(self.reader.read_b_constants()))
        iw.write_floats(flatten_1dim(self.reader.read_c_coefficients()))
        (vs,cs) = zip(*self.params)
        iw.write_elements(cs)
        iw.write_elements(vs)
        ow.write_floats(self.reader.read_results())

    def convert(self, mode):
        prefix = FutharkFormat.get_prefix(mode)
        tin = os.path.join(self.output_dir, prefix + self.output_in_file)
        tout = os.path.join(self.output_dir, prefix + self.output_out_file)
        iw, ow = FutharkTestWriter(tin), FutharkTestWriter(tout)
        if mode == FutharkFormat.OuterParallel:
            self.convert_outer_parallel(iw, ow)
        elif mode == FutharkFormat.InnerParallel:
            self.convert_inner_parallel(iw, ow)
        elif mode == FutharkFormat.FullParallel:
            self.convert_full_parallel(iw, ow)

# ---------------------------------------------------------------------------- #
# External commands
# ---------------------------------------------------------------------------- #

def generate_test_data(filename,n,(vl,vh),(cl,ch)):
    '''Call Simplex Instance Generator to output data in Python syntax.'''
    strc = 'make -C ../Simplex\ Instance\ Generator -s run\
            N={0} VLOW={1} VHIGH={2} CLOW={3} CHIGH={4} > {5}'
    cmd = strc.format(n,vl,vh,cl,ch,filename)
    subprocess.call(cmd, shell=True)

def run_futhark(files, compiler='futhark-c', mode='test'):
    '''Test/benchmark a futhark program on list of files.
       compiler param is the futhark compiler to use.
       mode is either 'test' or 'bench'.
    '''
    for f in files:
        if os.path.isfile(f):
            cmd = 'futhark-{0} --compiler={1} {2}'.format(mode, compiler, f)
            subprocess.call(cmd, shell=True)
        else:
            print("File doesn't exist: {0}".format(f))

def cleanup():
    cmd = 'rm -f {0}*'.format(tmp_prefix)
    subprocess.call(cmd, shell=True)

# ---------------------------------------------------------------------------- #
# Entry Point
# ---------------------------------------------------------------------------- #

def doit(args):
    '''Main test runner. args are parsed command-line parameters.'''
    try:
        n,v,c = args.number, args.variables, args.constants
        if not(args.no_gen or args.convert):
            print('Generating test data: N={0}, V={1}, C={2}'.format(n,v,c))
            test_file = os.path.join(test_dir, 'cplex_'+test_in) #tmp_prefix+'test.file'
            generate_test_data(test_file,n,v,c)

        if args.convert:
            test_file = args.convert
            args.no_test_bench = True

        if not(args.no_gen):
            print('Converting Simplex Instance Generator data to Futhark test data')
            converter = FutharkTestConverter(test_file, test_dir, test_in, test_out, v[1], c[1])
            for mode in FutharkFormat.All:
                converter.convert(mode)

        compiler = args.compiler
        if args.no_test_bench:
            pass
        elif args.test_all:
            print('Testing all files')
            run_futhark(glob('./*.fut'), compiler, mode='test')
        elif args.test:
            print('Testing one file: ' + args.test)
            run_futhark([args.test], compiler, mode='test')
        elif args.bench_all:
            print('Benchmarking all files')
            run_futhark(glob('./*.fut'), compiler, mode='bench')
        elif args.bench:
            print('Benchmarking one file: ' + args.bench)
            run_futhark([args.bench], compiler, mode='bench')
        else:
            print('Default: Testing all files')
            run_futhark(glob('./*.fut'), compiler, mode='test')
    finally:
        cleanup()

def int_tuple(string):
    '''Parse an integer tuple from a string of the format "int1,int2". '''
    spl = string.split(",")
    if len(spl) != 2:
        raise argparse.ArgumentTypeError("arg {0} should be a range a,b".format(string))
    try:
        return int(spl[0]),int(spl[1])
    except TypeError:
        raise argparse.ArgumentTypeError("range {0} must be integers".format(string))

def main():
    parser = argparse.ArgumentParser(description='Test the Futhark Simplex suite.')
    parser.add_argument('-a','--test-all', help='Test all versions',action='store_true')
    parser.add_argument('-t','--test', help='Test one file')
    parser.add_argument('-e','--bench-all', help='Benchmark all versions',action='store_true')
    parser.add_argument('-b','--bench', help='Benchmark one file')
    parser.add_argument('-n','--number', help='Number of instances to generate.', type=int, default=5)
    parser.add_argument('-v','--variables', help='Range of variable numbers (n)', type=int_tuple, default=(1,5))
    parser.add_argument('-c','--constants', help='Range of constant numbers (m)', type=int_tuple, default=(1,5))
    parser.add_argument('-x','--no-test-bench', help='Only generate test data', action='store_true')
    parser.add_argument('-y','--no-gen', help='Do not generate test data', action='store_true')
    parser.add_argument('-p','--compiler', help='Which Futhark compiler to use', default='futhark-c')
    parser.add_argument('--convert', help='Given a file with Simplex Instance Generator output, convert to futhark simplex format')
    # TODO: maybe data gen mode: sparse, etc.
    #       --directory: run tests from directory
    args = parser.parse_args()
    doit(args)

main()
